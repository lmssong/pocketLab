<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/labMain',
      'pages/login',
      'pages/approvalCenter',
      'pages/documentCenter',
      'pages/messageCenter',
      'pages/receiveManage',
      'pages/testingManage',
      'pages/reportManage',
      'pages/dataManage',
      'pages/dataReportDetail',
      'pages/toolsManage',
      'pages/userManage'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '口袋实验室',
      navigationBarTextStyle: 'black'
    },
    // tabBar: {
      // list: [
      //   {
      //   pagePath: 'pages/labMain',
      //   text: '实验室',
      //   iconPath: '/images/labMain.png',
      //   selectedIconPath: '/images/labMain.png'
      // }, {
      //   pagePath: 'pages/taskMain',
      //   text: '任务',
      //   iconPath: '/images/taskMain.png',
      //   selectedIconPath: '/images/taskMain.png'
      // }, {
      //   pagePath: 'pages/scanMain',
      //   text: '扫一扫',
      //   iconPath: '/images/scanMain.png',
      //   selectedIconPath: '/images/scanMain.png'
      // }, {
      //   pagePath: 'pages/sampleMain',
      //   text: '样品',
      //   iconPath: '/images/sampleMain.png',
      //   selectedIconPath: '/images/sampleMain.png'
      // }, {
      //   pagePath: 'pages/mySetup',
      //   text: '我的',
      //   iconPath: '/images/mySetup.png',
      //   selectedIconPath: '/images/mySetup.png'
      // }
      // ]
    // }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
